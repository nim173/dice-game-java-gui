package model.interfaces;

/**
 * <pre> Assignment interface for Further Programming representing the player
 * to be implemented by SimplePlayer class with the following constructor:
 *      <b>public SimplePlayer(String playerId, String playerName, int initialPoints)</b>
 * 
 * <b>NOTE:</b> playerID is unique and if another player with same id is added it replaces the previous player</pre>
 * 
 * @author Caspar Ryan
 */
public interface Player
{
   /**
    * @return human readable player name
    */
   public abstract String getPlayerName();

   /**
    * @param playerName - human readable player name
    */
   public abstract void setPlayerName(String playerName);

   /**
    * 
    * @return number of points from setPoints()
    */
   public abstract int getPoints();

   /**
    * <pre>
    * @param points - for betting 
    *    NOTE: (updated by {@link GameEngine#applyWinLoss(Player, DicePair)} with each win or loss)
    *  </pre>
    */
   public abstract void setPoints(int points);

   /**
    * @return the player ID which is generated by the implementing class
    */
   public abstract String getPlayerId();

   /**
    * <b>NOTE:</b> must use resetBet() for 0 bet since not valid for this method
    * 
    * @param bet - the bet in points
    * @return true if bet is greater than 0 and player has sufficient points to place the bet<br>
    */
   public abstract boolean setBet(int bet);

   /**
    * @return the bet as set with setBet()
    */
   public abstract int getBet();

   /**
    * reset the bet to 0 for next round (in case player does not bet again in next round)
    */
   public abstract void resetBet();

   /**
    * @return a DicePair containing final dice values of a roll as set by {@link Player#setResult(DicePair)}
    */
   public abstract DicePair getResult();

   /**
    * @param rollResult
    *            <pre>a DicePair containing final dice values (updated from the GameEngine via 
    *            {@link GameEngine#rollPlayer(Player, int, int, int, int, int, int)})</pre>
    */
   public abstract void setResult(DicePair rollResult);

   /**
    * @return 
    *          <pre>a human readable String that lists the values of this Player 
    *          including their last roll result
    *      
    *          e.g. "Player: id=1, name=The Roller, bet=100, points=4900, RESULT .. Dice 1: One,  Dice 2: Three .. Total: 4" 
    *          (see OutputTrace.pdf)</pre>
    */
   @Override
   public abstract String toString();
}
